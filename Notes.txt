# REACT
1. Knows how to work with components
2. Called a "Reconciler"

#ReactDOM
1. Knows how to take instructions on what we want to show and turn it into HTML
2. Called a "Renderer".

#useState
1. Function for working with React's state system
2. State is used to keep track of data that changes over time.
3. Used to make React update the HTML on the screen. 

#Commands:
1. a. npx create-react-app <myapp>
    If Error: npm uninstall -g create-react-app

1. b. npm install -g create-react-app
      create-react-app <my-app> 
3. 


#Project Structure:
1. src : Folder where we put all the source code
2. public : Folder that stores static files , images
3. node_modules : Folder that contains dependencies
4. package.json : Records our project dependencies and configure our project
5. package-lock.json : Records the exact version of packages that we install

#Component: 
1. It's a function or a class that produces HTML to show the user (Using JSX)
2. Handles feedback from the user (Using Event handlers)
 
 // 3 tenets of components
    * Nesting 
    * Reusability
    * Configuration

#Functional Components: Hooks System
1. Can produce JSX to show content to user
2. Can use hooks to run code at specific points in time
3. Can you Hooks to access state system and update content on screen.

#Class Components:
1. Can produce JSX to show content to user
2. Can use Lifecycle Method to run code at specific points in time
3. Can use 'state' system to update content on screen
4. Must be a JS Class
5. Must extend (subclass) React.Component
6. Must define a render method that returns some JSX

#State:
1. Only usable with class components.
2. It is a JS object that contains data relevant to a component
3. Updating state causes the component to instantly re-render
4. State must be initialised when a component is created.
5. Dont confuse with props!
6. State can only be updated using the setState()


#Component Lifecycle:
1. constructor
2. render
...content visible on screen...
3. componentDidMount
...sit and wait for updates
4. componentDidUpdate...
..sit and wait until this component is no longer shown...
5. componentWillUnmount

//Other Lifecycle methods
1. shouldComponentUpdate
2. getDerivedStateFromProps
3. getSn apshotBeforeUpdate


